@model WebApplication1.ViewModels.TouchSaleInvVM
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/full_page.cshtml";
}

<script type="text/javascript">
    function Actiona(a) {

        id = a;
        // alert(id);
        //    var Id = $("#selectlist").val();
        $.ajax
            ({
                type: "GET",
                url: "/TouchSale/GetAllowanceList?id=" + id,
                success: function (result) {
                    $("#AllowanceListWrapper").html(result)
                }
            });

    }
</script>
<div class="row">
    <div class="col-sm-12">
        <a href="@Url.Action("Create", "City")" class="btn btn-wide btn-info pull-right" style="margin-top:-40px"><i class="fa fa-plus"></i>  Go Back</a>
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="col-md-4">
            <table id="invoiceItem" class="table table-hover table-bordered">
                <tr>
                    <td colspan="5" class="alert alert-success" align="center">
                        <center><b>Item List</b>    </center>
                    </td>
                </tr>
                <tr>
                    <th style="width:10px">Del</th>
                    <th>Name</th>
                    <th>Rate</th>
                    <th>Qty</th>
                </tr>
            </table>
        </div>
        <div class="col-md-8">


            <ul class="nav-tabs">
                <div class="row">
                    @foreach (var item in Model.cat_list)
                    {
                        <div class="col-md-3 btn">
                            <button class="btn btn-info"><a data-toggle="tab" href="#@item.Id" onclick="Actiona(@item.Id)" style="color:white">@item.Name @item.Id</a></button>
                        </div>
                    }
                </div>
            </ul>
        </div>
    </div>
</div>
<!-- Menu End-->
<button type="button" value="7" onclick="button(7)">7</button>
<button type="button" value="8" onclick="button(8)">8</button>
<button type="button" value="9" onclick="button(9)">9</button>
<!-- Inner Content-->
<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <div class="calculator card" style="margin-left:-10px;">

                <input type="text" class="calculator-screen z-depth-1" value="" disabled />

                <div class="calculator-keys">

                    PartialView
                    <button type="button" value="7" onclick="button(7)">7</button>
                    <button type="button" value="8" class="btn btn-light waves-effect">8</button>
                    <button type="button" value="9" class="btn btn-light waves-effect">9</button>


                    <button type="button" value="4" class="btn btn-light waves-effect">4</button>
                    <button type="button" value="5" class="btn btn-light waves-effect">5</button>
                    <button type="button" value="6" class="btn btn-light waves-effect">6</button>


                    <button type="button" value="1" class="btn btn-light waves-effect">1</button>
                    <button type="button" value="2" class="btn btn-light waves-effect">2</button>
                    <button type="button" value="3" class="btn btn-light waves-effect">3</button>


                    <button type="button" value="0" class="btn btn-light waves-effect">0</button>
                    <button type="button" class="decimal function btn btn-secondary" value=".">.</button>
                    <button type="button" class="all-clear function btn btn-danger btn-sm" value="all-clear">AC</button>

                    <button type="button" class="equal-sign operator btn btn-default" value="=">=</button>

                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="form-group" id="AllowanceListWrapper">
                <partial name="" model="@ViewBag.Product" />
            </div>
            <div class="tab-content">
                @foreach (var item in Model.cat_list)
                {
                    <div id="@item.Id" class="tab-pane fade in ">


                    </div>
                }
            </div>
        </div>

    </div>
</div>
<script>
    const calculator = {
        displayValue: '0',
        firstOperand: null,
        waitingForSecondOperand: false,
        operator: null,
    };

    function inputDigit(digit) {
        const { displayValue, waitingForSecondOperand } = calculator;

        if (waitingForSecondOperand === true) {
            calculator.displayValue = digit;
            calculator.waitingForSecondOperand = false;
        } else {
            calculator.displayValue = displayValue === '0' ? digit : displayValue + digit;
        }
    }

    function inputDecimal(dot) {
        // If the `displayValue` does not contain a decimal point
        if (!calculator.displayValue.includes(dot)) {
            // Append the decimal point
            calculator.displayValue += dot;
        }
    }

    function handleOperator(nextOperator) {
        const { firstOperand, displayValue, operator } = calculator
        const inputValue = parseFloat(displayValue);

        if (operator && calculator.waitingForSecondOperand) {
            calculator.operator = nextOperator;
            return;
        }

        if (firstOperand == null) {
            calculator.firstOperand = inputValue;
        } else if (operator) {
            const currentValue = firstOperand || 0;
            const result = performCalculation[operator](currentValue, inputValue);

            calculator.displayValue = String(result);
            calculator.firstOperand = result;
        }

        calculator.waitingForSecondOperand = true;
        calculator.operator = nextOperator;
    }

    const performCalculation = {
        '/': (firstOperand, secondOperand) => firstOperand / secondOperand,

        '*': (firstOperand, secondOperand) => firstOperand * secondOperand,

        '+': (firstOperand, secondOperand) => firstOperand + secondOperand,

        '-': (firstOperand, secondOperand) => firstOperand - secondOperand,

        '=': (firstOperand, secondOperand) => secondOperand
    };

    function resetCalculator() {
        calculator.displayValue = '0';
        calculator.firstOperand = null;
        calculator.waitingForSecondOperand = false;
        calculator.operator = null;
    }

    function updateDisplay() {
        const display = document.querySelector('.calculator-screen');
        display.value = calculator.displayValue;
    }

    updateDisplay();

    const keys = document.querySelector('.calculator-keys');
    keys.addEventListener('click', (event) => {
        const { target } = event;
        if (!target.matches('button')) {
            return;
        }

        if (target.classList.contains('operator')) {
            handleOperator(target.value);
            updateDisplay();
            return;
        }

        if (target.classList.contains('decimal')) {
            inputDecimal(target.value);
            updateDisplay();
            return;
        }

        if (target.classList.contains('all-clear')) {
            resetCalculator();
            updateDisplay();
            return;
        }

        inputDigit(target.value);
        updateDisplay();
    });
</script>

